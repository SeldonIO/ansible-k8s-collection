---
- name: "Create a k8s namespaces: {{ gitea_namespace }}"
  kubernetes.core.k8s:
    name: "{{ gitea_namespace }}"
    api_version: v1
    kind: Namespace
    state: present


- name: "Install Gitea Server"
  kubernetes.core.helm:
    name: gitea
    release_namespace: "{{ gitea_namespace }}"
    chart_repo_url: "https://dl.gitea.io/charts/"
    chart_ref: "gitea"
    chart_version: "{{ gitea_version }}"
    values: "{{ gitea_values }}"
    values_files: "{{ gitea_values_files }}"


- name: "Wait for Gitea StatefulSets"
  shell: "kubectl rollout status -n {{ gitea_namespace }} statefulsets/{{ item }}"
  with_items:
    - gitea-postgresql
    - gitea
  when: gitea_wait_for_deployments | bool


- name: "Wait for Gitea deployments (memcached)"
  shell: "kubectl rollout status -n {{ gitea_namespace }} deploy/{{ item }}"
  with_items:
    - gitea-memcached
  when: gitea_wait_for_deployments | bool


- name: "Configure Gitea VirtualService"
  kubernetes.core.k8s:
    state: present
    template: templates/gitea-vs.yaml.j2
  when: gitea_create_virtualservice | bool


- name: "Set fact about Gitea ingress when VirtualService is available"
  when: gitea_create_virtualservice | bool
  block:
    - name: "Log external address"
      ansible.builtin.debug:
        var: external_address


    - name: "Set fact about Gitea ingress URI"
      set_fact:
        gitea_ingress_uri: "{{ external_address }}/gitea"


- name: "Set fact about Gitea ingress when VirtualService is not available"
  when: not (gitea_create_virtualservice | bool)
  block:
    - name: "Get an existing Service object"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: gitea-http
        namespace: gitea-system
      register: web_service

    - name: "Set fact about Gitea External IP"
      set_fact:
        gitea_external_ip: "{{ web_service.resources[0].status.loadBalancer.ingress[0].ip }}"


    - name: "Log external IP address"
      ansible.builtin.debug:
        var: gitea_external_ip


    - name: "Set fact about Gitea ingress URI"
      set_fact:
        gitea_ingress_uri: "{{ gitea_external_ip }}:{{ gitea_port }}"


- name: "Check if {{ gitops_repo_name }} exists"
  uri:
    url: "http://{{ gitea_ingress_uri }}/api/v1/repos/{{ gitops_user }}/{{ gitops_repo_name }}"
    user: "{{ gitops_user }}"
    password: "{{ gitops_password }}"
    method: GET
    force_basic_auth: yes
    status_code:
      - 200
      - 404
  register: repo_data
  until: (repo_data.status == 200) or (repo_data.status == 404)
  retries: 60  # 60 * 1 seconds = 1 minute
  delay: 1     # Every 1 seconds


- name: "Create {{ gitops_repo_name }} repository if it does not exist"
  uri:
    url: "http://{{ gitea_ingress_uri }}/api/v1/user/repos"
    user: "{{ gitops_user }}"
    password: "{{ gitops_password }}"
    body:
      auto_init: true
      private: true
      name: "{{ gitops_repo_name }}"
    body_format: json
    method: POST
    force_basic_auth: yes
    status_code: 201
  when: repo_data.status == 404
